package io.qimia.uhrwerk.config;

import io.qimia.uhrwerk.common.model.*;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

class ConfigBuilderTest {
  @Test
  public void connectionBuilderTest() {

    Connection[] connection = (new ConnectionBuilder())
            .name("S3")
              .s3()
                .path("S3Path")
                .secret_id("ID")
                .secret_key("key")
            .name("JDBC")
              .jdbc()
                .jdbc_url("url")
                .jdbc_driver("driver")
                .user("user")
                .pass("pass")
            .name("file")
              .file()
                .path("filePath")
            .build();
    for (Connection c : connection)
          {
            System.out.println(c);
    }

  }


  @Test
  public void tableBuilderTest() {

    Table table = (new TableBuilder())
            .area("TableArea")
            .vertical("TableVertical")
            .table("TableTable")
            .version("TableVersion")
            //.parallelism(2)
            //.maxBulkSize(2)
            .partition()
              .unit("hours")
              .size(4)
            .source()
              .connection_name("SourceConnection1")
              .path("SourcePath1")
              .format("SourceFormat1")
              .version("1.0")
              .partition()
                .unit("days")
                .size(10)
              .parallel_load()
                .query("SELECT * FROM BLA1")
                .column("Column1")
                .num(10)
              .select()
                .query("config/table_test_2_select_query.sql")
                .column("created_at")
            .source()
              .connection_name("SourceConnection2")
              .path("SourcePath2")
              .format("SourceFormat2")
              .version("1.0")
              .partition()
                .unit("hours")
                .size(24)
              //.parallel_load()
              //  .query("SELECT * FROM BLA2")
              //  .column("Column2")
              //  .num(5)
              .select()
                .query("SELECT * FROM BLA3")
                .column("Column3")
            .target()
              .connection_name("TargetConnection1")
              .format("TargetFormat1")
            .target()
              .connection_name("TargetConnection2")
              .format("TargetFormat2")
            .dependency()
              .area("DepArea1")
              .version("1.1")
              .vertical("DepVertical1")
              .table("DepTableTable1")
              .format("DepFormat1")
              .transform()
                .type("identity")
            .dependency()
              .area("DepArea2")
              .version("1.2")
              .vertical("DepVertical2")
              .table("DepTableTable2")
              .format("DepFormat2")
              .transform()
                .type("window")
                .partition()
                  .size(5)
            .dependency()
              .area("DepArea3")
              .version("1.3")
              .vertical("DepVertical3")
              .table("DepTableTable3")
              .format("DepFormat3")
              .transform()
                .type("aggregate")
                .partition()
                  .size(2)
            .dependency()
              .area("DepArea4")
              .version("1.4")
              .vertical("DepVertical4")
              .table("DepTableTable4")
              .format("DepFormat4")
              .transform()
                .type("temporal_aggregate")
                .partition()
                  .size(4)
                  .unit("hours")
            .build();
      System.out.println(table);

  }

  @Test
  public void metastoreBuilderTest() {

    Metastore metastore = (new MetastoreBuilder())
            .jdbc_url("url")
            .jdbc_driver("driver")
            .user("user")
            .pass("pass")
            .build();

    System.out.println(metastore);

  }

  @Test
  public void dagBuilderTest() {

    Dag dag = (new DagBuilder())
    .connection()
            .name("S3")
            .s3()
            .path("S3Path")
            .secret_id("ID")
            .secret_key("key")
            .connection()
            .name("JDBC")
            .jdbc()
            .jdbc_url("url")
            .jdbc_driver("driver")
            .user("user")
            .pass("pass")
            .connection()
            .name("file")
            .file()
            .path("filePath")
            .table()
            .area("TableArea")
            .vertical("TableVertical")
            .table("TableTable")
            .version("TableVersion")
            .parallelism(2)
            .maxBulkSize(2)
            .partition()
              .unit("hours")
              .size(4)
            .source()
            .connection_name("SourceConnection1")
            .path("SourcePath1")
            .format("SourceFormat1")
            .version("1.0")
            .partition()
            .unit("days")
            .size(10)
            .parallel_load()
            .query("SELECT * FROM BLA1")
            .column("Column1")
            .num(10)
            .select()
            .query("config/table_test_2_select_query.sql")
            .column("created_at")
            //.source()
            //.connection_name("SourceConnection2")
            //.path("SourcePath2")
            //.format("SourceFormat2")
            //.version("1.0")
            //.partition()
            //.unit("hours")
            //.size(24)
            ////.parallel_load()
            ////  .query("SELECT * FROM BLA2")
            ////  .column("Column2")
            ////  .num(5)
            //.select()
            //.query("SELECT * FROM BLA3")
            //.column("Column3")
            //.target()
            //.connection_name("TargetConnection1")
            //.format("TargetFormat1")
            //.target()
            //.connection_name("TargetConnection2")
            //.format("TargetFormat2")
            //.dependency()
            //.area("DepArea1")
            //.version("1.1")
            //.vertical("DepVertical1")
            //.table("DepTableTable1")
            //.format("DepFormat1")
            //.transform()
            //.type("identity")
            //.dependency()
            //.area("DepArea2")
            //.version("1.2")
            //.vertical("DepVertical2")
            //.table("DepTableTable2")
            //.format("DepFormat2")
            //.transform()
            //.type("window")
            //.partition()
            //.size(5)
            //.dependency()
            //.area("DepArea3")
            //.version("1.3")
            //.vertical("DepVertical3")
            //.table("DepTableTable3")
            //.format("DepFormat3")
            //.transform()
            //.type("aggregate")
            //.partition()
            //.size(2)
            //.dependency()
            //.area("DepArea4")
            //.version("1.4")
            //.vertical("DepVertical4")
            //.table("DepTableTable4")
            //.format("DepFormat4")
            //.transform()
            //.type("temporal_aggregate")
            //.partition()
            //.size(4)
            //.unit("hours")
            .build();

    System.out.println(dag);

  }

}