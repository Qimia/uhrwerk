package io.qimia.uhrwerk.config;

import io.qimia.uhrwerk.common.model.Dag;
import io.qimia.uhrwerk.config.representation.Table;
import io.qimia.uhrwerk.config.representation.Connection;

import org.junit.jupiter.api.Test;

class DagBuilderTest {

  @Test
  public void tableBuilderTest() {

    Dag dag = (new DagBuilder())
            .connection()
            .name("S3")
            .s3()
            .path("S3Path")
            .secretId("ID")
            .secretKey("key")
            .done()
            .done()
            .connection()
            .name("JDBC")
            .jdbc()
            .jdbcUrl("url")
            .jdbcDriver("driver")
            .user("user")
            .pass("pass")
            .done()
            .done()
            .connection()
            .name("file")
            .file()
            .path("filePath")
            .done()
            .done()
            .table()
            .area("TableArea")
            .vertical("TableVertical")
            .table("TableTable")
            .version("TableVersion")
            .parallelism(2)
            .maxBulkSize(2)
            .partition()
            .unit("days")
            .size(4)
            .done()
            .source()
            .connectionName("SourceConnection1")
            .path("SourcePath1")
            .format("SourceFormat1")
            .version("1.0")
            .partition()
            .unit("days")
            .size(10)
            .done()
            .parallelLoad()
            .query("SELECT * FROM BLA1")
            .column("Column1")
            .num(10)
            .done()
            .select()
            .query("config/table_test_2_select_query.sql")
            .column("created_at")
            .done()
            .done()
            .source()
            .connectionName("SourceConnection2")
            .path("SourcePath2")
            .format("SourceFormat2")
            .version("1.0")
            .partition()
            .unit("hours")
            .size(24)
            .done()
            //.parallel_load()
            //  .query("SELECT * FROM BLA2")
            //  .column("Column2")
            //  .num(5)
            .select()
            .query("SELECT * FROM BLA3")
            .column("Column3")
            .done()
            .done()
            .target()
            .connectionName("TargetConnection1")
            .format("TargetFormat1")
            .done()
            .target()
            .connectionName("TargetConnection2")
            .format("TargetFormat2")
            .done()
            .dependency()
            .area("DepArea1")
            .version("1.1")
            .vertical("DepVertical1")
            .table("DepTableTable1")
            .format("DepFormat1")
            .transform()
            .type("identity")
            .done()
            .done()
            .dependency()
            .area("DepArea2")
            .version("1.2")
            .vertical("DepVertical2")
            .table("DepTableTable2")
            .format("DepFormat2")
            .transform()
            .type("window")
            .partition()
            .size(5)
            .done()
            .done()
            .done()
            .dependency()
            .area("DepArea3")
            .version("1.3")
            .vertical("DepVertical3")
            .table("DepTableTable3")
            .format("DepFormat3")
            .transform()
            .type("aggregate")
            .partition()
            .size(2)
            .done()
            .done()
            .done()
            .dependency()
            .area("DepArea4")
            .version("1.4")
            .vertical("DepVertical4")
            .table("DepTableTable4")
            .format("DepFormat4")
            .transform()
            .type("temporal_aggregate")
            .partition()
            .size(4)
            .unit("hours")
            .done()
            .done()
            .done()
            .done()
            .build();

    System.out.println(dag);

  }

  @Test
  void nestedBuildTest1() {

    Table table = new TableBuilder()
            .area("TableArea")
            .vertical("TableVertical")
            .table("TableTable")
            .version("TableVersion")
            .parallelism(2)
            .maxBulkSize(2)
            .partition()
            .unit("hours")
            .size(4)
            .done()
            .source()
            .connectionName("SourceConnection1")
            .path("SourcePath1")
            .format("SourceFormat1")
            .version("1.0")
            .partition()
            .unit("days")
            .size(10)
            .done()
            .parallelLoad()
            .query("SELECT * FROM BLA1")
            .column("Column1")
            .num(10)
            .done()
            .select()
            .query("config/table_test_2_select_query.sql")
            .column("created_at")
            .done()
            .done()
            .source()
            .connectionName("SourceConnection2")
            .path("SourcePath2")
            .format("SourceFormat2")
            .version("1.0")
            .partition()
            .unit("hours")
            .size(24)
            .done()
            //.parallel_load()
            //  .query("SELECT * FROM BLA2")
            //  .column("Column2")
            //  .num(5)
            .select()
            .query("SELECT * FROM BLA3")
            .column("Column3")
            .done()
            .done()
            .target()
            .connectionName("TargetConnection1")
            .format("TargetFormat1")
            .done()
            .target()
            .connectionName("TargetConnection2")
            .format("TargetFormat2")
            .done()
            .dependency()
            .area("DepArea1")
            .version("1.1")
            .vertical("DepVertical1")
            .table("DepTableTable1")
            .format("DepFormat1")
            .transform()
            .type("identity")
            .done()
            .done()
            .dependency()
            .area("DepArea2")
            .version("1.2")
            .vertical("DepVertical2")
            .table("DepTableTable2")
            .format("DepFormat2")
            .transform()
            .type("window")
            .partition()
            .size(5)
            .done()
            .done()
            .done()
            .dependency()
            .area("DepArea3")
            .version("1.3")
            .vertical("DepVertical3")
            .table("DepTableTable3")
            .format("DepFormat3")
            .transform()
            .type("aggregate")
            .partition()
            .size(2)
            .done()
            .done()
            .done()
            .dependency()
            .area("DepArea4")
            .version("1.4")
            .vertical("DepVertical4")
            .table("DepTableTable4")
            .format("DepFormat4")
            .transform()
            .type("temporal_aggregate")
            .partition()
            .size(4)
            .unit("hours")
            .done()
            .done()
            .done()
            .buildRepresentationTable();

    var connection1 = new ConnectionBuilder()
            .name("s3")
            .s3()
            .path("s3Path")
            .secretKey("secretKey")
            .secretId("secretID")
            .done()
            .buildRepresentationConnection();


    var connection2 = new ConnectionBuilder()
            .name("file")
            .file()
            .path("filePath")
            .done()
            .buildRepresentationConnection();

    var tables = new Table[1];
    tables[0] = table;

    var connections = new Connection[2];
    connections[0] = connection1;
    connections[1] = connection2;

    var dag = new DagBuilder()
            .tables(tables)
            .connections(connections)
            .build();

    System.out.println(dag);
  }

}
