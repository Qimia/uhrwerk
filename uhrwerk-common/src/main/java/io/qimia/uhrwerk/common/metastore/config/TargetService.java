package io.qimia.uhrwerk.common.metastore.config;

import io.qimia.uhrwerk.common.model.TargetModel;

import java.util.List;
import java.util.Optional;

public interface TargetService {

    /**
     * Save an array of targets for a particular table
     *
     * @param targets   all targets for some table
     * @param tableId   id of the table
     * @param overwrite are overwrites allowed or not
     * @return result object showing what is stored, exceptions, if save was successful, and if not, why
     */
    TargetResult save(List<TargetModel> targets, Long tableId, boolean overwrite);

    /**
     * Retrieve a target by target-id
     *
     * @param id id (can be generated by Target)
     * @return Optional with Target if found and empty in all other cases
     */
    Optional<TargetModel> get(Long id);

    /**
     * Retrieve all targets set for a table
     *
     * @param tableId id of table for which the targets are defined
     * @return array of Target model objects
     */
    List<TargetModel> getTableTargets(Long tableId);

    Integer deactivateByTableId(Long tableId);

}
